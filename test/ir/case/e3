int longest_substring_palindrome(int arr[10])
{
    int n = 10;
    int p[2][21];
    int i, mx, id;
    int res;

    i = 0;
    while (i < n) {
        p[0][i * 2] = 0;
        p[0][i * 2 + 1] = arr[i];

        i = i + 1;
    }

    p[0][2 * n] = 0;

    i = 0;
    while (i < 2 * n + 1) {
        p[1][i] = 0;
        i = i + 1;
    }

    mx = 0;
    id = 0;
    i = 0;
    while (i < 2 * n + 1) {
        if (2 * id - i >= 0 && mx - i > p[1][2 * id - i])
            p[1][i] = p[1][2 * id - i];
        else
            p[1][i] = mx - i;
        while (i + p[1][i] + 1 < 2 * n + 1 && i - p[1][i] - 1 >= 0 &&
            p[0][i + p[1][i] + 1] == p[0][i - p[1][i] - 1])
            p[1][i] = p[1][i] + 1;
        if (i + p[1][i] > mx) {
            mx = i + p[1][i];
            id = i;
        }

        i = i + 1;
    }

    res = 0;
    i = 0;
    while (i < 2 * n + 1) {
        if (p[1][i] > res)
            res = p[1][i];

        i = i + 1;
    }
    return res;
}

int main()
{
    int num[10];

    num[0] = 1;
    num[1] = 2;
    num[2] = 1;
    num[3] = 2;
    num[4] = 3;
    num[5] = 2;
    num[6] = 1;
    num[7] = 1;
    num[8] = 2;
    num[9] = 1;

    write(longest_substring_palindrome(num));
    return 0;
}
